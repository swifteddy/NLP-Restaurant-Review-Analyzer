best.month
#profit after tax was lowest for year
worst.month <- profit.after.tax == min(profit.after.tax)
worst.month
revenue.1000
expenses.1000
profit.1000
profit.after.tax.1000
profit.margin
good.months
bad.months
best.month
worst.month
#Data
revenue <- c(14574.49, 7606.46, 8611.41, 9175.41, 8058.65, 8105.44, 11496.28, 9766.09, 10305.32, 14379.96, 10713.97, 15433.50)
expenses <- c(12051.82, 5695.07, 12319.20, 12089.72, 8658.57, 840.20, 3285.73, 5821.12, 6976.93, 16618.61, 10054.37, 3803.96)
#Solution profit for each month
profit <- revenue-expenses
profit
#profit after each months with 30% tax rate
tax <- round(0.30 * profit, digits=2)
profit.after.tax <- profit - tax
profit.after.tax
#profit margin for each month, equal to profit after tax divided by revenue
profit.margin <- round(profit.after.tax/revenue, 2) * 100
profit.margin
mean_pat <- mean(profit.after.tax)
mean_pat
#profit after tax that was greater than mean
good.months <- profit.after.tax > mean_pat
good.months
#where profit after tax was less than mean
bad.months <-  !good.months
bad.months
#profit after tax was max for year
best.month <- profit.after.tax == max(profit.after.tax)
best.month
#profit after tax was lowest for year
worst.month <- profit.after.tax == min(profit.after.tax)
worst.month
#convert all calc to units of one thousand dollars
revenue.1000 <- round(revenue/1000)
expenses.1000 <- round(expenses/1000)
profit.1000 <- round(profit/1000)
profit.after.tax <- round(profit.after.tax/1000)
revenue.1000
expenses.1000
profit.1000
profit.after.tax.1000
profit.margin
good.months
bad.months
best.month
worst.month
profit.after.tax.1000 <- round(profit.after.tax/1000)
profit.after.tax.1000
#Data
revenue <- c(14574.49, 7606.46, 8611.41, 9175.41, 8058.65, 8105.44, 11496.28, 9766.09, 10305.32, 14379.96, 10713.97, 15433.50)
expenses <- c(12051.82, 5695.07, 12319.20, 12089.72, 8658.57, 840.20, 3285.73, 5821.12, 6976.93, 16618.61, 10054.37, 3803.96)
#Solution profit for each month
profit <- revenue-expenses
profit
#profit after each months with 30% tax rate
tax <- round(0.30 * profit, digits=2)
profit.after.tax <- profit - tax
profit.after.tax
#profit margin for each month, equal to profit after tax divided by revenue
profit.margin <- round(profit.after.tax/revenue, 2) * 100
profit.margin
mean_pat <- mean(profit.after.tax)
mean_pat
#profit after tax that was greater than mean
good.months <- profit.after.tax > mean_pat
good.months
#where profit after tax was less than mean
bad.months <-  !good.months
bad.months
#profit after tax was max for year
best.month <- profit.after.tax == max(profit.after.tax)
best.month
#profit after tax was lowest for year
worst.month <- profit.after.tax == min(profit.after.tax)
worst.month
#convert all calc to units of one thousand dollars
revenue.1000 <- round(revenue/1000)
expenses.1000 <- round(expenses/1000)
profit.1000 <- round(profit/1000)
profit.after.tax.1000 <- round(profit.after.tax/1000)
revenue.1000
expenses.1000
profit.1000
profit.after.tax.1000
profit.margin
good.months
bad.months
best.month
worst.month
m <- rbind(
revenue.1000,
expenses.1000,
profit.1000,
profit.after.tax.1000,
profit.margin,
good.months,
bad.months,
best.month,
worst.month,
)
m <- rbind(
revenue.1000,
expenses.1000,
profit.1000,
profit.after.tax.1000,
profit.margin,
good.months,
bad.months,
best.month,
worst.month
)
m
setwd("C:/Users/MHMeh/OneDrive/Desktop/NLP Project")
#importing the data set
dataset = read.tsv('Restaurant_Reviews')
dataset = read.tsv('Restaurant_Reviews')
#importing the data set
dataset = read.delim('Restaurant_Reviews')
#importing the data set
dataset = read.delim('Restaurant_Reviews.tsv')
View(dataset)
View(dataset)
View(dataset)
dataset = read.delim('Restaurant_Reviews.tsv',quote = '', stringsAsFactors = FALSE)
View(dataset)
View(dataset)
#Cleaning the text
install.packages('tm')
#Cleaning the text
library(tm)
corpus = Vcorpus(VectorSource(dataset$Review))
library(tm)
corpus = Vcorpus(VectorSource(dataset$Review))
corpus = VCorpus(VectorSource(dataset$Review))
corpus = tm_map(corpus, content_transformer(tolower))
#importing the data set
#1 is positive review, 0 is negative review
dataset = read.delim('Restaurant_Reviews.tsv',quote = '', stringsAsFactors = FALSE)
#install the NLP package for R
#install.packages('tm')
#Cleaning the text
library(tm)
corpus = VCorpus(VectorSource(dataset$Review))
as.character(corpus[[1]])
corpus = tm_map(corpus, content_transformer(tolower))
as.character(corpus[[1]])
# install the NLP package for R
#install.packages('tm')
install.packages('SnowballC')
library(SnowballC)
corpus = tm_map(corpus, content_transformer(tolower))
# removes numbers, punctuation and stop words from the reviews because they
# don't provide any useful info for our model
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords(stopwords()))
corpus = tm_map(corpus, removeWords(stopwords()))
corpus = tm_map(corpus, removeWords, stopwords())
corpus = tm_map(corpus, stemDocument)
corpus = tm_map(corpus, stripWhitespace)
# Creating bag of words model
dtm = DocoumentTermMatrix(corpus)
# Creating bag of words model
dtm = DocumentTermMatrix(corpus)
dtm = DocumentTermMatrix(corpus)
#keep 99% of most frequent words in our sparce matrix of features
dtm = removeSparseTerms(dtm, 0.99)
#keep 99% of most frequent words in our sparce matrix of features
dtm = removeSparseTerms(dtm, 0.999)
dataset$Liked = dataset_original$Liked
# importing the data set
# 1 is positive review, 0 is negative review
dataset_original = read.delim('Restaurant_Reviews.tsv',quote = '', stringsAsFactors = FALSE)
dataset$Liked = dataset_original$Liked
dataset = dataset[3:5]
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
# Fitting Random Forest Classification to the Training set
# install.packages('randomForest')
library(randomForest)
dtm = DocumentTermMatrix(corpus)
#keep 99% of most frequent words in our sparce matrix of features
dtm = removeSparseTerms(dtm, 0.999)
dataset =  as.data.frame(as.matrix(dtm))
dataset$Liked = dataset_original$Liked
# NLP Reviews
# importing the data set
# 1 is positive review, 0 is negative review
dataset_original = read.delim('Restaurant_Reviews.tsv',quote = '', stringsAsFactors = FALSE)
dataset = dataset[3:5]
# install the NLP package for R
#install.packages('tm')
#install.packages('SnowballC')
# Cleaning the text
library(tm)
library(SnowballC)
corpus = VCorpus(VectorSource(dataset$Review))
# lower cases all the reviews so we don't have two versions of the same words
corpus = tm_map(corpus, content_transformer(tolower))
# removes numbers, punctuation, stop words and white space from the reviews
# because they don't provide any useful info for our model, also using Porters
# Stemming algorithm we remove the root of all the words in our text
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords())
corpus = tm_map(corpus, stemDocument)
corpus = tm_map(corpus, stripWhitespace)
# Creating bag of words model
dtm = DocumentTermMatrix(corpus)
#keep 99% of most frequent words in our sparce matrix of features
dtm = removeSparseTerms(dtm, 0.999)
dataset =  as.data.frame(as.matrix(dtm))
dataset$Liked = dataset_original$Liked
# Random Forest Classification
# Encoding the target feature as factor
dataset$Liked = factor(dataset$Liked, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
# none needed because we dont have one independent variable dominating another
# Fitting Random Forest Classification to the Training set
# install.packages('randomForest')
library(randomForest)
set.seed(123)
classifier = randomForest(x = training_set[-692],
y = training_set$Liked,
ntree = 10)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-692])
# Making the Confusion Matrix
cm = table(test_set[, 692], y_pred)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Encoding the target feature as factor
dataset$Liked = factor(dataset$Liked, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
# none needed because we dont have one independent variable dominating another
# Fitting Random Forest Classification to the Training set
# install.packages('randomForest')
library(randomForest)
set.seed(123)
classifier = randomForest(x = training_set[-692],
y = training_set$Liked,
ntree = 10)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-692])
# Making the Confusion Matrix
cm = table(test_set[, 692], y_pred)
library(caTools)
# NLP Reviews
# importing the data set
# 1 is positive review, 0 is negative review
dataset_original = read.delim('Restaurant_Reviews.tsv',quote = '', stringsAsFactors = FALSE)
dataset = dataset[3:5]
# install the NLP package for R
#install.packages('tm')
#install.packages('SnowballC')
# Cleaning the text
library(tm)
library(SnowballC)
corpus = VCorpus(VectorSource(dataset$Review))
# lower cases all the reviews so we don't have two versions of the same words
corpus = tm_map(corpus, content_transformer(tolower))
# removes numbers, punctuation, stop words and white space from the reviews
# because they don't provide any useful info for our model, also using Porters
# Stemming algorithm we remove the root of all the words in our text
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords())
corpus = tm_map(corpus, stemDocument)
corpus = tm_map(corpus, stripWhitespace)
# Creating bag of words model
dtm = DocumentTermMatrix(corpus)
#keep 99% of most frequent words in our sparce matrix of features
dtm = removeSparseTerms(dtm, 0.999)
dataset =  as.data.frame(as.matrix(dtm))
dataset$Liked = dataset_original$Liked
# Random Forest Classification
# Encoding the target feature as factor
dataset$Liked = factor(dataset$Liked, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
# none needed because we dont have one independent variable dominating another
# Fitting Random Forest Classification to the Training set
# install.packages('randomForest')
library(randomForest)
set.seed(123)
classifier = randomForest(x = training_set[-692],
y = training_set$Liked,
ntree = 10)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-692])
# Making the Confusion Matrix
cm = table(test_set[, 692], y_pred)
# NLP Reviews
# importing the data set
# 1 is positive review, 0 is negative review
dataset_original = read.delim('Restaurant_Reviews.tsv',quote = '', stringsAsFactors = FALSE)
dataset = dataset[3:5]
# install the NLP package for R
#install.packages('tm')
#install.packages('SnowballC')
# Cleaning the text
library(tm)
library(SnowballC)
corpus = VCorpus(VectorSource(dataset$Review))
# lower cases all the reviews so we don't have two versions of the same words
corpus = tm_map(corpus, content_transformer(tolower))
# removes numbers, punctuation, stop words and white space from the reviews
# because they don't provide any useful info for our model, also using Porters
# Stemming algorithm we remove the root of all the words in our text
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords())
corpus = tm_map(corpus, stemDocument)
corpus = tm_map(corpus, stripWhitespace)
# Creating bag of words model
dtm = DocumentTermMatrix(corpus)
#keep 99% of most frequent words in our sparce matrix of features
dtm = removeSparseTerms(dtm, 0.999)
dataset =  as.data.frame(as.matrix(dtm))
dataset$Liked = dataset_original$Liked
# Random Forest Classification
# Encoding the target feature as factor
dataset$Liked = factor(dataset$Liked, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
# none needed because we dont have one independent variable dominating another
# Fitting Random Forest Classification to the Training set
# install.packages('randomForest')
library(randomForest)
set.seed(123)
classifier = randomForest(x = training_set[-692],
y = training_set$Liked,
ntree = 10)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-692])
# Making the Confusion Matrix
cm = table(test_set[, 692], y_pred)
# NLP Reviews
# importing the data set
# 1 is positive review, 0 is negative review
dataset_original = read.delim('Restaurant_Reviews.tsv',quote = '', stringsAsFactors = FALSE)
# install the NLP package for R
#install.packages('tm')
#install.packages('SnowballC')
# Cleaning the text
library(tm)
library(SnowballC)
corpus = VCorpus(VectorSource(dataset$Review))
# lower cases all the reviews so we don't have two versions of the same words
corpus = tm_map(corpus, content_transformer(tolower))
# removes numbers, punctuation, stop words and white space from the reviews
# because they don't provide any useful info for our model, also using Porters
# Stemming algorithm we remove the root of all the words in our text
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords())
corpus = tm_map(corpus, stemDocument)
corpus = tm_map(corpus, stripWhitespace)
# Creating bag of words model
dtm = DocumentTermMatrix(corpus)
#keep 99% of most frequent words in our sparce matrix of features
dtm = removeSparseTerms(dtm, 0.999)
dataset =  as.data.frame(as.matrix(dtm))
dataset$Liked = dataset_original$Liked
# Random Forest Classification
# Encoding the target feature as factor
dataset$Liked = factor(dataset$Liked, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
# none needed because we dont have one independent variable dominating another
# Fitting Random Forest Classification to the Training set
# install.packages('randomForest')
library(randomForest)
set.seed(123)
classifier = randomForest(x = training_set[-692],
y = training_set$Liked,
ntree = 10)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-692])
# Making the Confusion Matrix
cm = table(test_set[, 692], y_pred)
# NLP Reviews
# importing the data set
# 1 is positive review, 0 is negative review
dataset_original = read.delim('Restaurant_Reviews.tsv',quote = '', stringsAsFactors = FALSE)
# install the NLP package for R
#install.packages('tm')
#install.packages('SnowballC')
# Cleaning the text
library(tm)
library(SnowballC)
corpus = VCorpus(VectorSource(dataset$Review))
# lower cases all the reviews so we don't have two versions of the same words
corpus = tm_map(corpus, content_transformer(tolower))
# removes numbers, punctuation, stop words and white space from the reviews
# because they don't provide any useful info for our model, also using Porters
# Stemming algorithm we remove the root of all the words in our text
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords())
corpus = tm_map(corpus, stemDocument)
corpus = tm_map(corpus, stripWhitespace)
# Creating bag of words model
dtm = DocumentTermMatrix(corpus)
#keep 99% of most frequent words in our sparce matrix of features
dtm = removeSparseTerms(dtm, 0.999)
dataset =  as.data.frame(as.matrix(dtm))
dataset$Liked = dataset_original$Liked
# Random Forest Classification
# Encoding the target feature as factor
dataset$Liked = factor(dataset$Liked, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
# none needed because we dont have one independent variable dominating another
# Fitting Random Forest Classification to the Training set
# install.packages('randomForest')
library(randomForest)
set.seed(123)
classifier = randomForest(x = training_set[-692],
y = training_set$Liked,
ntree = 10)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-692])
# Making the Confusion Matrix
cm = table(test_set[, 692], y_pred)
dataset_original = read.delim('Restaurant_Reviews.tsv',quote = '', stringsAsFactors = FALSE)
dataset = read.delim('Restaurant_Reviews.tsv',quote = '', stringsAsFactors = FALSE)
library(tm)
library(SnowballC)
corpus = VCorpus(VectorSource(dataset$Review))
# lower cases all the reviews so we don't have two versions of the same words
corpus = tm_map(corpus, content_transformer(tolower))
# removes numbers, punctuation, stop words and white space from the reviews
# because they don't provide any useful info for our model, also using Porters
# Stemming algorithm we remove the root of all the words in our text
corpus = tm_map(corpus, removeNumbers)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords())
corpus = tm_map(corpus, stemDocument)
corpus = tm_map(corpus, stripWhitespace)
dtm = DocumentTermMatrix(corpus)
#keep 99% of most frequent words in our sparce matrix of features
dtm = removeSparseTerms(dtm, 0.999)
dataset =  as.data.frame(as.matrix(dtm))
dataset$Liked = dataset_original$Liked
dataset$Liked = factor(dataset$Liked, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Liked, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Fitting Random Forest Classification to the Training set
# install.packages('randomForest')
library(randomForest)
set.seed(123)
classifier = randomForest(x = training_set[-692],
y = training_set$Liked,
ntree = 10)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-692])
# Making the Confusion Matrix
cm = table(test_set[, 692], y_pred)
cm
